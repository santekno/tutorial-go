// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package main

import (
	"sync"
)

// Ensure, that UserRepositoryInterfaceMock does implement UserRepositoryInterface.
// If this is not the case, regenerate this file with moq.
var _ UserRepositoryInterface = &UserRepositoryInterfaceMock{}

// UserRepositoryInterfaceMock is a mock implementation of UserRepositoryInterface.
//
// 	func TestSomethingThatUsesUserRepositoryInterface(t *testing.T) {
//
// 		// make and configure a mocked UserRepositoryInterface
// 		mockedUserRepositoryInterface := &UserRepositoryInterfaceMock{
// 			GetAllUsersFunc: func() ([]User, error) {
// 				panic("mock out the GetAllUsers method")
// 			},
// 		}
//
// 		// use mockedUserRepositoryInterface in code that requires UserRepositoryInterface
// 		// and then make assertions.
//
// 	}
type UserRepositoryInterfaceMock struct {
	// GetAllUsersFunc mocks the GetAllUsers method.
	GetAllUsersFunc func() ([]User, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetAllUsers holds details about calls to the GetAllUsers method.
		GetAllUsers []struct {
		}
	}
	lockGetAllUsers sync.RWMutex
}

// GetAllUsers calls GetAllUsersFunc.
func (mock *UserRepositoryInterfaceMock) GetAllUsers() ([]User, error) {
	if mock.GetAllUsersFunc == nil {
		panic("UserRepositoryInterfaceMock.GetAllUsersFunc: method is nil but UserRepositoryInterface.GetAllUsers was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetAllUsers.Lock()
	mock.calls.GetAllUsers = append(mock.calls.GetAllUsers, callInfo)
	mock.lockGetAllUsers.Unlock()
	return mock.GetAllUsersFunc()
}

// GetAllUsersCalls gets all the calls that were made to GetAllUsers.
// Check the length with:
//     len(mockedUserRepositoryInterface.GetAllUsersCalls())
func (mock *UserRepositoryInterfaceMock) GetAllUsersCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetAllUsers.RLock()
	calls = mock.calls.GetAllUsers
	mock.lockGetAllUsers.RUnlock()
	return calls
}
